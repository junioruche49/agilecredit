{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/react app/agilecreditportal/src/components/FormInput.tsx\";\nimport React from \"react\";\nimport ReactDatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst FormInput = ({\n  label,\n  name,\n  required,\n  errors,\n  register,\n  type,\n  options,\n  value,\n  format = \"\",\n  Controller,\n  control,\n  readonly = false,\n  readonlyValue,\n  toggleInput\n}) => {\n  let inputType = null;\n\n  switch (type) {\n    case \"text\":\n      inputType = /*#__PURE__*/React.createElement(\"input\", {\n        className: \"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\",\n        id: \"grid-last-name\",\n        type: \"text\",\n        ref: register({\n          required\n        }),\n        name: name,\n        defaultValue: value,\n        readOnly: readonlyValue ? readonlyValue : readonly,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }\n      });\n      break;\n\n    case \"email\":\n      inputType = /*#__PURE__*/React.createElement(\"input\", {\n        className: \"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\",\n        id: \"grid-last-name\",\n        type: \"email\",\n        ref: register({\n          required\n        }),\n        name: name,\n        defaultValue: value,\n        readOnly: readonlyValue ? readonlyValue : readonly,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      });\n      break;\n\n    case \"boolean\":\n      inputType = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flex \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"flex items-center cursor-pointer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"relative\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        id: \"toogleA\",\n        type: \"checkbox\",\n        name: name // className=\"hidden\"\n        ,\n        defaultValue: value,\n        ref: register({}),\n        onChange: e => toggleInput(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }\n      }))));\n      break;\n\n    case \"mobile\":\n    case \"phone\":\n      inputType = /*#__PURE__*/React.createElement(\"input\", {\n        className: \"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\",\n        id: \"grid-last-name\",\n        type: \"tel\",\n        ref: register({\n          required\n        }),\n        name: name,\n        defaultValue: value,\n        readOnly: readonlyValue ? readonlyValue : readonly,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }\n      });\n      break;\n\n    case \"number\":\n      inputType = /*#__PURE__*/React.createElement(\"input\", {\n        className: \"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\",\n        id: \"grid-last-name\",\n        type: \"number\",\n        ref: register({\n          required\n        }),\n        name: name,\n        defaultValue: value,\n        readOnly: readonlyValue ? readonlyValue : readonly,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      });\n      break;\n\n    case \"date\":\n      if (format === \"Y\") {\n        if (value) {\n          var d = new Date();\n          d.setFullYear(value);\n          console.log(d);\n          inputType = /*#__PURE__*/React.createElement(Controller, {\n            control: control,\n            name: name,\n            rules: {\n              required\n            },\n            defaultValue: d,\n            render: ({\n              onChange,\n              onBlur,\n              value\n            }) => /*#__PURE__*/React.createElement(ReactDatePicker, {\n              onChange: onChange,\n              onBlur: onBlur,\n              selected: value,\n              showYearPicker: true,\n              yearItemNumber: 9,\n              dateFormat: \"yyyy\",\n              className: \"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 17\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 13\n            }\n          });\n        } else {\n          inputType = /*#__PURE__*/React.createElement(Controller, {\n            control: control,\n            name: name,\n            rules: {\n              required\n            } // defaultValue={d}\n            ,\n            render: ({\n              onChange,\n              onBlur,\n              value\n            }) => /*#__PURE__*/React.createElement(ReactDatePicker, {\n              onChange: onChange,\n              onBlur: onBlur,\n              selected: value,\n              showYearPicker: true,\n              yearItemNumber: 9,\n              dateFormat: \"yyyy\",\n              className: \"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 17\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 13\n            }\n          });\n        }\n      } else {\n        inputType = /*#__PURE__*/React.createElement(\"input\", {\n          className: \"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\",\n          id: \"grid-last-name\",\n          type: \"date\",\n          ref: register({\n            required\n          }),\n          name: name // value={value}\n          ,\n          defaultValue: value,\n          readOnly: readonlyValue ? readonlyValue : readonly,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 11\n          }\n        });\n      }\n\n      break;\n\n    case \"file\":\n      inputType = /*#__PURE__*/React.createElement(\"input\", {\n        type: \"file\",\n        ref: register({\n          required\n        }),\n        name: name,\n        className: \"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }\n      }) // <input\n      //   className=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n      //   id=\"grid-last-name\"\n      //   type=\"date\"\n      //   ref={register({ required })}\n      //   name={name}\n      // />\n      ;\n      break;\n\n    case \"select\":\n      inputType = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"relative\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"select\", {\n        className: \"block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\",\n        id: \"grid-state\",\n        ref: register({\n          required\n        }),\n        name: name,\n        disabled: readonlyValue ? readonlyValue : readonly,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }\n      }, \"- Select -\"), options && options.map((option, key) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          key: key,\n          value: option.value,\n          selected: option.value === value ? true : false,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 19\n          }\n        }, option.label);\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"svg\", {\n        className: \"fill-current h-4 w-4\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 20 20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"path\", {\n        d: \"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }\n      }))));\n      break;\n\n    default:\n      inputType = /*#__PURE__*/React.createElement(\"input\", {\n        className: \"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\",\n        id: \"grid-last-name\",\n        type: \"text\",\n        ref: register({\n          required\n        }),\n        name: name,\n        defaultValue: value,\n        readOnly: readonlyValue ? readonlyValue : readonly,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 9\n        }\n      });\n      break;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-full md:w-1/2 px-3 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }\n  }, label), inputType, errors[name] && errors[name].type === \"required\" && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-red-500 text-xs italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, \"Please fill out this field.\"));\n};\n\nexport default FormInput;","map":{"version":3,"sources":["/Users/mac/Documents/react app/agilecreditportal/src/components/FormInput.tsx"],"names":["React","ReactDatePicker","FormInput","label","name","required","errors","register","type","options","value","format","Controller","control","readonly","readonlyValue","toggleInput","inputType","e","d","Date","setFullYear","console","log","onChange","onBlur","map","option","key"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst FormInput = ({\n  label,\n  name,\n  required,\n  errors,\n  register,\n  type,\n  options,\n  value,\n  format = \"\",\n  Controller,\n  control,\n  readonly = false,\n  readonlyValue,\n  toggleInput,\n}) => {\n  let inputType: any = null;\n\n  switch (type) {\n    case \"text\":\n      inputType = (\n        <input\n          className=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n          id=\"grid-last-name\"\n          type=\"text\"\n          ref={register({ required })}\n          name={name}\n          defaultValue={value}\n          readOnly={readonlyValue ? readonlyValue : readonly}\n        />\n      );\n      break;\n    case \"email\":\n      inputType = (\n        <input\n          className=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n          id=\"grid-last-name\"\n          type=\"email\"\n          ref={register({ required })}\n          name={name}\n          defaultValue={value}\n          readOnly={readonlyValue ? readonlyValue : readonly}\n        />\n      );\n      break;\n    case \"boolean\":\n      inputType = (\n        <div className=\"flex \">\n          <label className=\"flex items-center cursor-pointer\">\n            <div className=\"relative\">\n              <input\n                id=\"toogleA\"\n                type=\"checkbox\"\n                name={name}\n                // className=\"hidden\"\n                defaultValue={value}\n                ref={register({})}\n                onChange={(e) => toggleInput(e)}\n              />\n              {/* <div className=\"toggle__line w-10 h-4 bg-gray-400 rounded-full shadow-inner\"></div>\n              <div className=\"toggle__dot absolute w-6 h-6 bg-white rounded-full shadow inset-y-0 left-0\"></div> */}\n            </div>\n          </label>\n        </div>\n      );\n      break;\n    case \"mobile\":\n    case \"phone\":\n      inputType = (\n        <input\n          className=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n          id=\"grid-last-name\"\n          type=\"tel\"\n          ref={register({ required })}\n          name={name}\n          defaultValue={value}\n          readOnly={readonlyValue ? readonlyValue : readonly}\n        />\n      );\n      break;\n    case \"number\":\n      inputType = (\n        <input\n          className=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n          id=\"grid-last-name\"\n          type=\"number\"\n          ref={register({ required })}\n          name={name}\n          defaultValue={value}\n          readOnly={readonlyValue ? readonlyValue : readonly}\n        />\n      );\n      break;\n    case \"date\":\n      if (format === \"Y\") {\n        if (value) {\n          var d = new Date();\n          d.setFullYear(value);\n          console.log(d);\n          inputType = (\n            <Controller\n              control={control}\n              name={name}\n              rules={{ required }}\n              defaultValue={d}\n              render={({ onChange, onBlur, value }) => (\n                <ReactDatePicker\n                  onChange={onChange}\n                  onBlur={onBlur}\n                  selected={value}\n                  showYearPicker\n                  yearItemNumber={9}\n                  dateFormat=\"yyyy\"\n                  className=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n                />\n              )}\n            />\n          );\n        } else {\n          inputType = (\n            <Controller\n              control={control}\n              name={name}\n              rules={{ required }}\n              // defaultValue={d}\n              render={({ onChange, onBlur, value }) => (\n                <ReactDatePicker\n                  onChange={onChange}\n                  onBlur={onBlur}\n                  selected={value}\n                  showYearPicker\n                  yearItemNumber={9}\n                  dateFormat=\"yyyy\"\n                  className=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n                />\n              )}\n            />\n          );\n        }\n      } else {\n        inputType = (\n          <input\n            className=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n            id=\"grid-last-name\"\n            type=\"date\"\n            ref={register({ required })}\n            name={name}\n            // value={value}\n            defaultValue={value}\n            readOnly={readonlyValue ? readonlyValue : readonly}\n          />\n        );\n      }\n\n      break;\n    case \"file\":\n      inputType = (\n        <input\n          type=\"file\"\n          ref={register({ required })}\n          name={name}\n          className=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n        />\n        // <input\n        //   className=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n        //   id=\"grid-last-name\"\n        //   type=\"date\"\n        //   ref={register({ required })}\n        //   name={name}\n        // />\n      );\n      break;\n    case \"select\":\n      inputType = (\n        <div className=\"relative\">\n          <select\n            className=\"block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n            id=\"grid-state\"\n            ref={register({ required })}\n            name={name}\n            disabled={readonlyValue ? readonlyValue : readonly}\n          >\n            <option value=\"\">- Select -</option>\n            {options &&\n              options.map((option, key) => {\n                return (\n                  <option\n                    key={key}\n                    value={option.value}\n                    selected={option.value === value ? true : false}\n                  >\n                    {option.label}\n                  </option>\n                );\n              })}\n          </select>\n          <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700 \">\n            <svg\n              className=\"fill-current h-4 w-4\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 20 20\"\n            >\n              <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n            </svg>\n          </div>\n        </div>\n      );\n      break;\n    default:\n      inputType = (\n        <input\n          className=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n          id=\"grid-last-name\"\n          type=\"text\"\n          ref={register({ required })}\n          name={name}\n          defaultValue={value}\n          readOnly={readonlyValue ? readonlyValue : readonly}\n        />\n      );\n      break;\n  }\n\n  return (\n    <div className=\"w-full md:w-1/2 px-3 mb-3\">\n      <label className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\">\n        {label}\n      </label>\n      {inputType}\n      {errors[name] && errors[name].type === \"required\" && (\n        <p className=\"text-red-500 text-xs italic\">\n          Please fill out this field.\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default FormInput;\n"]},"metadata":{},"sourceType":"module"}