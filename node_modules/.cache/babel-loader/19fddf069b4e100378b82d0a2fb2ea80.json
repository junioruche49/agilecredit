{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n\nvar DeeplinksOriginal =\n/** @class */\nfunction (_super) {\n  __extends(DeeplinksOriginal, _super);\n\n  function DeeplinksOriginal() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DeeplinksOriginal.prototype.route = function (paths) {\n    return cordova(this, \"route\", {\n      \"observable\": true\n    }, arguments);\n  };\n\n  DeeplinksOriginal.prototype.routeWithNavController = function (navController, paths, options) {\n    return cordova(this, \"routeWithNavController\", {\n      \"observable\": true\n    }, arguments);\n  };\n\n  DeeplinksOriginal.pluginName = \"Deeplinks\";\n  DeeplinksOriginal.plugin = \"ionic-plugin-deeplinks\";\n  DeeplinksOriginal.pluginRef = \"IonicDeeplink\";\n  DeeplinksOriginal.repo = \"https://github.com/ionic-team/ionic-plugin-deeplinks\";\n  DeeplinksOriginal.install = \"ionic cordova plugin add ionic-plugin-deeplinks --variable URL_SCHEME=myapp --variable DEEPLINK_SCHEME=https --variable DEEPLINK_HOST=example.com --variable ANDROID_PATH_PREFIX=/\";\n  DeeplinksOriginal.installVariables = [\"URL_SCHEME\", \"DEEPLINK_SCHEME\", \"DEEPLINK_HOST\", \"ANDROID_PATH_PREFIX\"];\n  DeeplinksOriginal.platforms = [\"Android\", \"Browser\", \"iOS\"];\n  return DeeplinksOriginal;\n}(IonicNativePlugin);\n\nvar Deeplinks = new DeeplinksOriginal();\nexport { Deeplinks };","map":{"version":3,"sources":["../../../../src/@ionic-native/plugins/deeplinks/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAO,iBAAP,EAAO,OAAP,QAAmD,oBAAnD;AACA,SAAS,UAAT,QAA2B,MAA3B;;;;;AA6F+B,EAAA,SAAA,CAAA,iBAAA,EAAiB,MAAjB,CAAA;;;;;;AAc7B,EAAA,iBAAA,CAAA,SAAA,CAAK,KAAL,GAAK,UAAW,KAAX,EAAW;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,OAAA,EAAA;AAAA,oBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAhB;;AA6BA,EAAA,iBAAA,CAAA,SAAA,CAAA,sBAAA,GAAsB,UAAC,aAAD,EAAiC,KAAjC,EAA0D,OAA1D,EAA0D;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,wBAAA,EAAA;AAAA,oBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAhF;;;;;;;;;SA1IF,iB;EA+F+B,iB;;IAAlB,SAAA,GAAA,IAAS,iBAAT,E","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n\nexport interface DeeplinkMatch {\n  /**\n   * The route info for the matched route\n   */\n  $route: any;\n\n  /**\n   * Any arguments passed either through route parameters or GET parameters\n   */\n  $args: any;\n\n  /**\n   * The deeplink object processed from the plugin, along with any\n   * any internal native data available as \"extras\" at the time\n   * the route was matched (for example, Facebook sometimes adds extra data)\n   */\n  $link: any;\n}\n\nexport interface DeeplinkOptions {\n  /**\n   * Set the matched route as root page using `navCtrl.setRoot()` method.\n   */\n  root: boolean;\n}\n\n/**\n * @name Deeplinks\n * @premier deeplinks\n * @description This plugin handles deeplinks on iOS and Android for both custom URL scheme links\n * and Universal App Links.\n *\n * Please read the [ionic plugin deeplinks docs](https://github.com/ionic-team/ionic-plugin-deeplinks) for iOS and Android integration.\n * You must add `universal-links` to your `config.xml` and set up Apple App Site Association (AASA) for iOS and Asset Links for Android.\n *\n * @usage\n * ```typescript\n * import { Deeplinks } from '@ionic-native/deeplinks/ngx';\n *\n * constructor(private deeplinks: Deeplinks) { }\n *\n * this.deeplinks.route({\n *      '/about-us': AboutPage,\n *      '/universal-links-test': AboutPage,\n *      '/products/:productId': ProductPage\n *    }).subscribe(match => {\n *      // match.$route - the route we matched, which is the matched entry from the arguments to route()\n *      // match.$args - the args passed in the link\n *      // match.$link - the full link data\n *      console.log('Successfully matched route', match);\n *    }, nomatch => {\n *      // nomatch.$link - the full link data\n *      console.error('Got a deeplink that didn\\'t match', nomatch);\n *    });\n * ```\n *\n * Alternatively, if you're using Ionic, there's a convenience method that takes a reference to a `NavController` and handles\n * the actual navigation for you:\n *\n * ```typescript\n * this.deeplinks.routeWithNavController(this.navController, {\n *   '/about-us': AboutPage,\n *   '/products/:productId': ProductPage\n * }).subscribe(match => {\n *     // match.$route - the route we matched, which is the matched entry from the arguments to route()\n *     // match.$args - the args passed in the link\n *     // match.$link - the full link data\n *     console.log('Successfully matched route', match);\n *   }, nomatch => {\n *     // nomatch.$link - the full link data\n *     console.error('Got a deeplink that didn\\'t match', nomatch);\n *   });\n * ```\n *\n * See the [Ionic Deeplinks Demo](https://github.com/ionic-team/ionic2-deeplinks-demo/blob/master/app/app.ts) for an example of how to\n * retrieve the `NavController` reference at runtime.\n *\n * @interfaces\n * DeeplinkMatch\n */\n@Plugin({\n  pluginName: 'Deeplinks',\n  plugin: 'ionic-plugin-deeplinks',\n  pluginRef: 'IonicDeeplink',\n  repo: 'https://github.com/ionic-team/ionic-plugin-deeplinks',\n  install:\n    'ionic cordova plugin add ionic-plugin-deeplinks --variable URL_SCHEME=myapp --variable DEEPLINK_SCHEME=https --variable DEEPLINK_HOST=example.com --variable ANDROID_PATH_PREFIX=/',\n  installVariables: ['URL_SCHEME', 'DEEPLINK_SCHEME', 'DEEPLINK_HOST', 'ANDROID_PATH_PREFIX'],\n  platforms: ['Android', 'Browser', 'iOS'],\n})\n@Injectable()\nexport class Deeplinks extends IonicNativePlugin {\n  /**\n   * Define a set of paths to match against incoming deeplinks.\n   *\n   * @param {paths} paths Define a set of paths to match against incoming deeplinks.\n   * paths takes an object of the form { 'path': data }. If a deeplink\n   * matches the path, the resulting path-data pair will be returned in the\n   * promise result which you can then use to navigate in the app as you see fit.\n   * @returns {Observable<DeeplinkMatch>} Returns an Observable that is called each time a deeplink comes through, and\n   * errors if a deeplink comes through that does not match a given path.\n   */\n  @Cordova({\n    observable: true,\n  })\n  route(paths: any): Observable<DeeplinkMatch> {\n    return;\n  }\n\n  /**\n   *\n   * This is a convenience version of `route` that takes a reference to a NavController\n   * from Ionic, or a custom class that conforms to this protocol:\n   *\n   * NavController.push = function(View, Params){}\n   *\n   * This handler will automatically navigate when a route matches. If you need finer-grained\n   * control over the behavior of a matching deeplink, use the plain `route` method.\n   *\n   * @param {Nav} navController Define a set of paths to match against incoming deeplinks.\n   * paths takes an object of the form { 'path': data }. If a deeplink\n   * matches the path, the resulting path-data pair will be returned in the\n   * promise result which you can then use to navigate in the app as you see fit.\n   *\n   * @param {Object} paths\n   *\n   * @param {DeeplinkOptions} options\n   *\n   * @returns {Observable<DeeplinkMatch>} Returns an Observable that resolves each time a deeplink comes through, and\n   * errors if a deeplink comes through that does not match a given path.\n   */\n  @Cordova({\n    observable: true,\n  })\n  routeWithNavController(navController: any, paths: any, options?: DeeplinkOptions): Observable<DeeplinkMatch> {\n    return;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}