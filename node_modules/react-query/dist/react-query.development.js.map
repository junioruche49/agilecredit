{"version":3,"file":"react-query.development.js","sources":["../src/core/types.ts","../src/core/utils.ts","../src/core/config.ts","../src/core/queryObserver.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/setFocusHandler.ts","../src/core/setOnlineHandler.ts","../src/react/ReactQueryCacheProvider.tsx","../src/react/ReactQueryConfigProvider.tsx","../src/react/utils.ts","../src/react/useIsFetching.ts","../src/react/useDefaultedMutationConfig.tsx","../src/react/useMutation.ts","../src/react/useDefaultedQueryConfig.tsx","../src/react/useBaseQuery.ts","../src/react/useQuery.ts","../src/react/usePaginatedQuery.ts","../src/react/useInfiniteQuery.ts"],"sourcesContent":["import type { FetchMoreOptions, RefetchOptions } from './query'\nimport type { QueryCache } from './queryCache'\n\nexport type QueryKey =\n  | boolean\n  | null\n  | number\n  | object\n  | string\n  | undefined\n  | { [key: number]: QueryKey }\n  | { [key: string]: QueryKey }\n  | readonly QueryKey[]\n\nexport type ArrayQueryKey = QueryKey[]\n\nexport type QueryFunction<TResult> = (\n  ...args: any[]\n) => TResult | Promise<TResult>\n\nexport type TypedQueryFunction<\n  TResult,\n  TArgs extends TypedQueryFunctionArgs = TypedQueryFunctionArgs\n> = (...args: TArgs) => TResult | Promise<TResult>\n\nexport type TypedQueryFunctionArgs = readonly [unknown, ...unknown[]]\n\nexport type InitialDataFunction<TResult> = () => TResult | undefined\n\nexport type InitialStaleFunction = () => boolean\n\nexport type QueryKeySerializerFunction = (\n  queryKey: QueryKey\n) => [string, QueryKey[]]\n\nexport interface BaseQueryConfig<TResult, TError = unknown, TData = TResult> {\n  /**\n   * If `false`, failed queries will not retry by default.\n   * If `true`, failed queries will retry infinitely., failureCount: num\n   * If set to an integer number, e.g. 3, failed queries will retry until the failed query count meets that number.\n   * If set to a function `(failureCount, error) => boolean` failed queries will retry until the function returns false.\n   */\n  retry?: boolean | number | ((failureCount: number, error: TError) => boolean)\n  retryDelay?: number | ((retryAttempt: number) => number)\n  staleTime?: number\n  cacheTime?: number\n  isDataEqual?: (oldData: unknown, newData: unknown) => boolean\n  queryFn?: QueryFunction<TData>\n  queryKey?: QueryKey\n  queryKeySerializerFn?: QueryKeySerializerFunction\n  queryFnParamsFilter?: (args: ArrayQueryKey) => ArrayQueryKey\n  initialData?: TResult | InitialDataFunction<TResult>\n  initialStale?: boolean | InitialStaleFunction\n  infinite?: true\n  /**\n   * Set this to `false` to disable structural sharing between query results.\n   * Defaults to `true`.\n   */\n  structuralSharing?: boolean\n  /**\n   * This function can be set to automatically get the next cursor for infinite queries.\n   * The result will also be used to determine the value of `canFetchMore`.\n   */\n  getFetchMore?: (lastPage: TData, allPages: TData[]) => unknown\n}\n\nexport interface QueryObserverConfig<\n  TResult,\n  TError = unknown,\n  TData = TResult\n> extends BaseQueryConfig<TResult, TError, TData> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   * Defaults to `true`.\n   */\n  enabled?: boolean | unknown\n  /**\n   * If set to a number, the query will continuously refetch at this frequency in milliseconds.\n   * Defaults to `false`.\n   */\n  refetchInterval?: number | false\n  /**\n   * If set to `true`, the query will continue to refetch while their tab/window is in the background.\n   * Defaults to `false`.\n   */\n  refetchIntervalInBackground?: boolean\n  /**\n   * Set this to `true` or `false` to enable/disable automatic refetching on window focus for this query.\n   * Defaults to `true`.\n   */\n  refetchOnWindowFocus?: boolean\n  /**\n   * Set this to `true` or `false` to enable/disable automatic refetching on reconnect for this query.\n   * Defaults to `true`.\n   */\n  refetchOnReconnect?: boolean\n  /**\n   * If set to `false`, will disable additional instances of a query to trigger background refetches.\n   * Defaults to `true`.\n   */\n  refetchOnMount?: boolean\n  /**\n   * Set this to `true` to always fetch when the component mounts (regardless of staleness).\n   * Defaults to `false`.\n   */\n  forceFetchOnMount?: boolean\n  /**\n   * Whether a change to the query status should re-render a component.\n   * If set to `false`, the component will only re-render when the actual `data` or `error` changes.\n   * Defaults to `true`.\n   */\n  notifyOnStatusChange?: boolean\n  /**\n   * This callback will fire any time the query successfully fetches new data.\n   */\n  onSuccess?: (data: TResult) => void\n  /**\n   * This callback will fire if the query encounters an error and will be passed the error.\n   */\n  onError?: (err: TError) => void\n  /**\n   * This callback will fire any time the query is either successfully fetched or errors and be passed either the data or error.\n   */\n  onSettled?: (data: TResult | undefined, error: TError | null) => void\n  /**\n   * Whether errors should be thrown instead of setting the `error` property.\n   * Defaults to `false`.\n   */\n  useErrorBoundary?: boolean\n  /**\n   * If set to `true`, the query will suspend when `status === 'loading'`\n   * and throw errors when `status === 'error'`.\n   * Defaults to `false`.\n   */\n  suspense?: boolean\n  /**\n   * Set this to `true` to keep the previous `data` when fetching based on a new query key.\n   * Defaults to `false`.\n   */\n  keepPreviousData?: boolean\n  /**\n   * By default the query cache from the context is used, but a different cache can be specified.\n   */\n  queryCache?: QueryCache\n}\n\nexport interface QueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface PaginatedQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface InfiniteQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult[], TError, TResult> {}\n\nexport type IsFetchingMoreValue = 'previous' | 'next' | false\n\nexport enum QueryStatus {\n  Idle = 'idle',\n  Loading = 'loading',\n  Error = 'error',\n  Success = 'success',\n}\n\nexport interface QueryResultBase<TResult, TError = unknown> {\n  canFetchMore: boolean | undefined\n  clear: () => void\n  data: TResult | undefined\n  error: TError | null\n  failureCount: number\n  fetchMore: (\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ) => Promise<TResult | undefined>\n  isError: boolean\n  isFetched: boolean\n  isFetchedAfterMount: boolean\n  isFetching: boolean\n  isFetchingMore?: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isStale: boolean\n  isSuccess: boolean\n  isPreviousData: boolean\n  refetch: (options?: RefetchOptions) => Promise<TResult | undefined>\n  status: QueryStatus\n  updatedAt: number\n}\n\nexport interface QueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {}\n\nexport interface PaginatedQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {\n  resolvedData: TResult | undefined\n  latestData: TResult | undefined\n}\n\nexport interface InfiniteQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult[], TError> {}\n\nexport interface MutateConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> {\n  onSuccess?: (data: TResult, variables: TVariables) => Promise<void> | void\n  onError?: (\n    error: TError,\n    variables: TVariables,\n    snapshotValue: TSnapshot\n  ) => Promise<void> | void\n  onSettled?: (\n    data: undefined | TResult,\n    error: TError | null,\n    variables: TVariables,\n    snapshotValue?: TSnapshot\n  ) => Promise<void> | void\n  throwOnError?: boolean\n}\n\nexport interface MutationConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutateConfig<TResult, TError, TVariables, TSnapshot> {\n  onMutate?: (variables: TVariables) => Promise<TSnapshot> | TSnapshot\n  useErrorBoundary?: boolean\n  suspense?: boolean\n  /**\n   * By default the query cache from the context is used, but a different cache can be specified.\n   */\n  queryCache?: QueryCache\n}\n\nexport type MutationFunction<TResult, TVariables = unknown> = (\n  variables: TVariables\n) => Promise<TResult>\n\nexport type MutateFunction<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> = (\n  variables?: TVariables,\n  config?: MutateConfig<TResult, TError, TVariables, TSnapshot>\n) => Promise<TResult | undefined>\n\nexport type MutationResultPair<TResult, TError, TVariables, TSnapshot> = [\n  MutateFunction<TResult, TError, TVariables, TSnapshot>,\n  MutationResult<TResult, TError>\n]\n\nexport interface MutationResult<TResult, TError = unknown> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n  reset: () => void\n}\n\nexport interface ReactQueryConfig<TResult = unknown, TError = unknown> {\n  queries?: ReactQueryQueriesConfig<TResult, TError>\n  shared?: ReactQuerySharedConfig\n  mutations?: ReactQueryMutationsConfig<TResult, TError>\n}\n\nexport interface ReactQuerySharedConfig {\n  suspense?: boolean\n}\n\nexport interface ReactQueryQueriesConfig<TResult, TError>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface ReactQueryMutationsConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutationConfig<TResult, TError, TVariables, TSnapshot> {}\n","import { QueryConfig, QueryStatus, QueryKey, QueryFunction } from './types'\n\n// TYPES\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\ntype ConsoleFunction = (...args: any[]) => void\n\nexport interface ConsoleObject {\n  log: ConsoleFunction\n  warn: ConsoleFunction\n  error: ConsoleFunction\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport class CancelledError {}\n\n// UTILS\n\nlet _uid = 0\nexport const uid = () => _uid++\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): void {\n  return void 0\n}\n\nexport let Console: ConsoleObject = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function setConsole(c: ConsoleObject) {\n  Console = c\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nfunction stableStringifyReplacer(_key: string, value: any): unknown {\n  if (typeof value === 'function') {\n    throw new Error('Cannot stringify non JSON value')\n  }\n\n  if (isObject(value)) {\n    return Object.keys(value)\n      .sort()\n      .reduce((result, key) => {\n        result[key] = value[key]\n        return result\n      }, {} as any)\n  }\n\n  return value\n}\n\nexport function stableStringify(value: any): string {\n  return JSON.stringify(value, stableStringifyReplacer)\n}\n\nexport function deepIncludes(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return false\n}\n\nexport function isDocumentVisible(): boolean {\n  // document global can be unavailable in react native\n  if (typeof document === 'undefined') {\n    return true\n  }\n  return [undefined, 'visible', 'prerender'].includes(document.visibilityState)\n}\n\nexport function isOnline(): boolean {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs<TResult, TError, TOptions = undefined>(\n  args: any[]\n): [QueryKey, QueryConfig<TResult, TError>, TOptions] {\n  let queryKey: QueryKey\n  let queryFn: QueryFunction<TResult> | undefined\n  let config: QueryConfig<TResult, TError> | undefined\n  let options: TOptions\n\n  if (isObject(args[0])) {\n    queryKey = args[0].queryKey\n    queryFn = args[0].queryFn\n    config = args[0].config\n    options = args[1]\n  } else if (isObject(args[1])) {\n    queryKey = args[0]\n    config = args[1]\n    options = args[2]\n  } else {\n    queryKey = args[0]\n    queryFn = args[1]\n    config = args[2]\n    options = args[3]\n  }\n\n  config = config ? { queryKey, ...config } : { queryKey }\n\n  if (queryFn) {\n    config = { ...config, queryFn }\n  }\n\n  return [queryKey, config, options]\n}\n\nexport function deepEqual(a: any, b: any): boolean {\n  return replaceEqualDeep(a, b) === a\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\nexport function isObject(a: unknown): boolean {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nfunction isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function getStatusProps<T extends QueryStatus>(status: T) {\n  return {\n    status,\n    isLoading: status === QueryStatus.Loading,\n    isSuccess: status === QueryStatus.Success,\n    isError: status === QueryStatus.Error,\n    isIdle: status === QueryStatus.Idle,\n  }\n}\n\nexport function createSetHandler(fn: () => void) {\n  let removePreviousHandler: (() => void) | void\n  return (callback: (handler: () => void) => void) => {\n    // Unsub the old handler\n    if (removePreviousHandler) {\n      removePreviousHandler()\n    }\n    // Sub the new handler\n    removePreviousHandler = callback(fn)\n  }\n}\n","import { stableStringify } from './utils'\nimport {\n  ArrayQueryKey,\n  QueryKey,\n  QueryKeySerializerFunction,\n  ReactQueryConfig,\n  QueryConfig,\n  MutationConfig,\n} from './types'\n\n// TYPES\n\nexport interface ReactQueryConfigRef {\n  current: ReactQueryConfig\n}\n\n// CONFIG\n\nexport const defaultQueryKeySerializerFn: QueryKeySerializerFunction = (\n  queryKey: QueryKey\n): [string, ArrayQueryKey] => {\n  try {\n    let arrayQueryKey: ArrayQueryKey = Array.isArray(queryKey)\n      ? queryKey\n      : [queryKey]\n    const queryHash = stableStringify(arrayQueryKey)\n    arrayQueryKey = JSON.parse(queryHash)\n    return [queryHash, arrayQueryKey]\n  } catch {\n    throw new Error('A valid query key is required!')\n  }\n}\n\n/**\n * Config merging strategy\n *\n * When using hooks the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the hook query cache.\n * 3. Combined defaults from any config providers in the tree.\n * 4. Query/mutation config provided to the hook.\n *\n * When using a query cache directly the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the query cache.\n * 3. Query/mutation config provided to the query cache method.\n */\nexport const DEFAULT_STALE_TIME = 0\nexport const DEFAULT_CACHE_TIME = 5 * 60 * 1000\nexport const DEFAULT_CONFIG: ReactQueryConfig = {\n  queries: {\n    cacheTime: DEFAULT_CACHE_TIME,\n    enabled: true,\n    notifyOnStatusChange: true,\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    refetchOnMount: true,\n    refetchOnReconnect: true,\n    refetchOnWindowFocus: true,\n    retry: 3,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n    staleTime: DEFAULT_STALE_TIME,\n    structuralSharing: true,\n  },\n}\n\nexport function mergeReactQueryConfigs(\n  a: ReactQueryConfig,\n  b: ReactQueryConfig\n): ReactQueryConfig {\n  return {\n    shared: {\n      ...a.shared,\n      ...b.shared,\n    },\n    queries: {\n      ...a.queries,\n      ...b.queries,\n    },\n    mutations: {\n      ...a.mutations,\n      ...b.mutations,\n    },\n  }\n}\n\nexport function getDefaultedQueryConfig<TResult, TError>(\n  queryCacheConfig?: ReactQueryConfig,\n  contextConfig?: ReactQueryConfig,\n  config?: QueryConfig<TResult, TError>,\n  configOverrides?: QueryConfig<TResult, TError>\n): QueryConfig<TResult, TError> {\n  return {\n    ...DEFAULT_CONFIG.shared,\n    ...DEFAULT_CONFIG.queries,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.queries,\n    ...contextConfig?.shared,\n    ...contextConfig?.queries,\n    ...config,\n    ...configOverrides,\n  } as QueryConfig<TResult, TError>\n}\n\nexport function getDefaultedMutationConfig<\n  TResult,\n  TError,\n  TVariables,\n  TSnapshot\n>(\n  queryCacheConfig?: ReactQueryConfig,\n  contextConfig?: ReactQueryConfig,\n  config?: MutationConfig<TResult, TError, TVariables, TSnapshot>,\n  configOverrides?: MutationConfig<TResult, TError, TVariables, TSnapshot>\n): MutationConfig<TResult, TError, TVariables, TSnapshot> {\n  return {\n    ...DEFAULT_CONFIG.shared,\n    ...DEFAULT_CONFIG.mutations,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.mutations,\n    ...contextConfig?.shared,\n    ...contextConfig?.mutations,\n    ...config,\n    ...configOverrides,\n  } as MutationConfig<TResult, TError, TVariables, TSnapshot>\n}\n","import { getStatusProps, isServer, isDocumentVisible } from './utils'\nimport type { QueryResult, QueryObserverConfig } from './types'\nimport type { Query, Action, FetchMoreOptions, RefetchOptions } from './query'\nimport type { QueryCache } from './queryCache'\n\nexport type UpdateListener<TResult, TError> = (\n  result: QueryResult<TResult, TError>\n) => void\n\nexport class QueryObserver<TResult, TError> {\n  config: QueryObserverConfig<TResult, TError>\n\n  private queryCache: QueryCache\n  private currentQuery!: Query<TResult, TError>\n  private currentResult!: QueryResult<TResult, TError>\n  private previousQueryResult?: QueryResult<TResult, TError>\n  private updateListener?: UpdateListener<TResult, TError>\n  private initialFetchedCount: number\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n  private started?: boolean\n\n  constructor(config: QueryObserverConfig<TResult, TError>) {\n    this.config = config\n    this.queryCache = config.queryCache!\n    this.initialFetchedCount = 0\n\n    // Bind exposed methods\n    this.clear = this.clear.bind(this)\n    this.refetch = this.refetch.bind(this)\n    this.fetchMore = this.fetchMore.bind(this)\n\n    // Subscribe to the query\n    this.updateQuery()\n  }\n\n  subscribe(listener?: UpdateListener<TResult, TError>): () => void {\n    this.started = true\n    this.updateListener = listener\n    this.currentQuery.subscribeObserver(this)\n\n    if (this.config.enabled && this.config.forceFetchOnMount) {\n      this.fetch()\n    } else {\n      this.optionalFetch()\n    }\n\n    this.updateTimers()\n    return this.unsubscribe.bind(this)\n  }\n\n  unsubscribe(): void {\n    this.started = false\n    this.updateListener = undefined\n    this.clearTimers()\n    this.currentQuery.unsubscribeObserver(this)\n  }\n\n  updateConfig(config: QueryObserverConfig<TResult, TError>): void {\n    const prevConfig = this.config\n    this.config = config\n\n    const updated = this.updateQuery()\n\n    // Take no further actions if the observer did not start yet\n    if (!this.started) {\n      return\n    }\n\n    // If we subscribed to a new query, optionally fetch and update refetch\n    if (updated) {\n      this.optionalFetch()\n      this.updateTimers()\n      return\n    }\n\n    // Optionally fetch if the query became enabled\n    if (config.enabled && !prevConfig.enabled) {\n      this.optionalFetch()\n    }\n\n    // Update stale interval if needed\n    if (\n      config.enabled !== prevConfig.enabled ||\n      config.staleTime !== prevConfig.staleTime\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    // Update refetch interval if needed\n    if (\n      config.enabled !== prevConfig.enabled ||\n      config.refetchInterval !== prevConfig.refetchInterval ||\n      config.refetchIntervalInBackground !==\n        prevConfig.refetchIntervalInBackground\n    ) {\n      this.updateRefetchInterval()\n    }\n  }\n\n  isStale(): boolean {\n    return this.currentResult.isStale\n  }\n\n  getCurrentQuery(): Query<TResult, TError> {\n    return this.currentQuery\n  }\n\n  getCurrentResult(): QueryResult<TResult, TError> {\n    return this.currentResult\n  }\n\n  clear(): void {\n    return this.currentQuery.clear()\n  }\n\n  async refetch(options?: RefetchOptions): Promise<TResult | undefined> {\n    return this.currentQuery.refetch(options, this.config)\n  }\n\n  async fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ): Promise<TResult | undefined> {\n    return this.currentQuery.fetchMore(fetchMoreVariable, options, this.config)\n  }\n\n  async fetch(): Promise<TResult | undefined> {\n    try {\n      return await this.currentQuery.fetch(undefined, this.config)\n    } catch {\n      // ignore\n    }\n  }\n\n  private optionalFetch(): void {\n    if (\n      this.config.enabled && // Don't auto refetch if disabled\n      !(this.config.suspense && this.currentResult.isFetched) && // Don't refetch if in suspense mode and the data is already fetched\n      this.currentResult.isStale && // Only refetch if stale\n      (this.config.refetchOnMount || this.currentQuery.observers.length === 1)\n    ) {\n      this.fetch()\n    }\n  }\n\n  private updateIsStale(): void {\n    const isStale = this.currentQuery.isStaleByTime(this.config.staleTime)\n    if (isStale !== this.currentResult.isStale) {\n      this.updateResult()\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    this.updateListener?.(this.currentResult)\n  }\n\n  private updateStaleTimeout(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearStaleTimeout()\n\n    const staleTime = this.config.staleTime || 0\n    const { isStale, updatedAt } = this.currentResult\n\n    if (isStale || staleTime === Infinity) {\n      return\n    }\n\n    const timeElapsed = Date.now() - updatedAt\n    const timeUntilStale = staleTime - timeElapsed\n    const timeout = Math.max(timeUntilStale, 0)\n\n    this.staleTimeoutId = setTimeout(() => {\n      this.updateIsStale()\n    }, timeout)\n  }\n\n  private updateRefetchInterval(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearRefetchInterval()\n\n    if (\n      !this.config.enabled ||\n      !this.config.refetchInterval ||\n      this.config.refetchInterval < 0 ||\n      this.config.refetchInterval === Infinity\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.config.refetchIntervalInBackground || isDocumentVisible()) {\n        this.fetch()\n      }\n    }, this.config.refetchInterval)\n  }\n\n  updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval()\n  }\n\n  clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearInterval(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  private updateResult(): void {\n    const { currentQuery, currentResult, previousQueryResult, config } = this\n    const { state } = currentQuery\n    let { data, status, updatedAt } = state\n    let isPreviousData = false\n\n    // Keep previous data if needed\n    if (\n      config.keepPreviousData &&\n      (state.isIdle || state.isLoading) &&\n      previousQueryResult?.isSuccess\n    ) {\n      data = previousQueryResult.data\n      updatedAt = previousQueryResult.updatedAt\n      status = previousQueryResult.status\n      isPreviousData = true\n    }\n\n    let isStale = false\n\n    // When the query has not been fetched yet and this is the initial render,\n    // determine the staleness based on the initialStale or existence of initial data.\n    if (!currentResult && !state.isFetched) {\n      if (typeof config.initialStale === 'function') {\n        isStale = config.initialStale()\n      } else if (typeof config.initialStale === 'boolean') {\n        isStale = config.initialStale\n      } else {\n        isStale = typeof state.data === 'undefined'\n      }\n    } else {\n      isStale = currentQuery.isStaleByTime(config.staleTime)\n    }\n\n    this.currentResult = {\n      ...getStatusProps(status),\n      canFetchMore: state.canFetchMore,\n      clear: this.clear,\n      data,\n      error: state.error,\n      failureCount: state.failureCount,\n      fetchMore: this.fetchMore,\n      isFetched: state.isFetched,\n      isFetchedAfterMount: state.fetchedCount > this.initialFetchedCount,\n      isFetching: state.isFetching,\n      isFetchingMore: state.isFetchingMore,\n      isPreviousData,\n      isStale,\n      refetch: this.refetch,\n      updatedAt,\n    }\n  }\n\n  private updateQuery(): boolean {\n    const prevQuery = this.currentQuery\n\n    // Remove the initial data when there is an existing query\n    // because this data should not be used for a new query\n    const config =\n      this.config.keepPreviousData && prevQuery\n        ? { ...this.config, initialData: undefined }\n        : this.config\n\n    const newQuery = this.queryCache.buildQuery(config.queryKey, config)\n\n    if (newQuery === prevQuery) {\n      return false\n    }\n\n    this.previousQueryResult = this.currentResult\n    this.currentQuery = newQuery\n    this.initialFetchedCount = newQuery.state.fetchedCount\n    this.updateResult()\n\n    if (this.started) {\n      prevQuery?.unsubscribeObserver(this)\n      this.currentQuery.subscribeObserver(this)\n    }\n\n    return true\n  }\n\n  onQueryUpdate(action: Action<TResult, TError>): void {\n    // Store current result and get new result\n    const prevResult = this.currentResult\n    this.updateResult()\n\n    const { currentResult, config } = this\n\n    // We need to check the action because the state could have\n    // transitioned from success to success in case of `setQueryData`.\n    if (action.type === 'Success' && currentResult.isSuccess) {\n      config.onSuccess?.(currentResult.data!)\n      config.onSettled?.(currentResult.data!, null)\n      this.updateTimers()\n    } else if (action.type === 'Error' && currentResult.isError) {\n      config.onError?.(currentResult.error!)\n      config.onSettled?.(undefined, currentResult.error!)\n      this.updateTimers()\n    }\n\n    if (\n      // Always notify on data or error change\n      currentResult.data !== prevResult.data ||\n      currentResult.error !== prevResult.error ||\n      // Maybe notify on other changes\n      config.notifyOnStatusChange\n    ) {\n      this.notify()\n    }\n  }\n}\n","import {\n  CancelledError,\n  Console,\n  Updater,\n  functionalUpdate,\n  getStatusProps,\n  isCancelable,\n  isCancelledError,\n  isDocumentVisible,\n  isOnline,\n  isServer,\n  noop,\n  replaceEqualDeep,\n  sleep,\n} from './utils'\nimport {\n  ArrayQueryKey,\n  InitialDataFunction,\n  IsFetchingMoreValue,\n  QueryConfig,\n  QueryFunction,\n  QueryStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport { QueryObserver, UpdateListener } from './queryObserver'\n\n// TYPES\n\ninterface QueryInitConfig<TResult, TError> {\n  queryCache: QueryCache\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  notifyGlobalListeners: (query: Query<TResult, TError>) => void\n}\n\nexport interface QueryState<TResult, TError> {\n  canFetchMore?: boolean\n  data?: TResult\n  error: TError | null\n  failureCount: number\n  fetchedCount: number\n  isError: boolean\n  isFetched: boolean\n  isFetching: boolean\n  isFetchingMore: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  status: QueryStatus\n  throwInErrorBoundary?: boolean\n  updatedAt: number\n}\n\ninterface FetchOptions {\n  fetchMore?: FetchMoreOptions\n}\n\nexport interface FetchMoreOptions {\n  fetchMoreVariable?: unknown\n  previous: boolean\n}\n\nexport interface RefetchOptions {\n  throwOnError?: boolean\n}\n\nexport enum ActionType {\n  Failed = 'Failed',\n  Fetch = 'Fetch',\n  Success = 'Success',\n  Error = 'Error',\n}\n\ninterface FailedAction {\n  type: ActionType.Failed\n}\n\ninterface FetchAction {\n  type: ActionType.Fetch\n  isFetchingMore?: IsFetchingMoreValue\n}\n\ninterface SuccessAction<TResult> {\n  type: ActionType.Success\n  data: TResult | undefined\n  canFetchMore?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: ActionType.Error\n  error: TError\n}\n\nexport type Action<TResult, TError> =\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | SuccessAction<TResult>\n\n// CLASS\n\nexport class Query<TResult, TError> {\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  observers: QueryObserver<TResult, TError>[]\n  state: QueryState<TResult, TError>\n  cacheTime: number\n\n  private queryCache: QueryCache\n  private promise?: Promise<TResult | undefined>\n  private gcTimeout?: number\n  private cancelFetch?: () => void\n  private continueFetch?: () => void\n  private isTransportCancelable?: boolean\n  private notifyGlobalListeners: (query: Query<TResult, TError>) => void\n\n  constructor(init: QueryInitConfig<TResult, TError>) {\n    this.config = init.config\n    this.queryCache = init.queryCache\n    this.queryKey = init.queryKey\n    this.queryHash = init.queryHash\n    this.notifyGlobalListeners = init.notifyGlobalListeners\n    this.observers = []\n    this.state = getDefaultState(init.config)\n    this.cacheTime = init.config.cacheTime!\n    this.scheduleGc()\n  }\n\n  private updateConfig(config: QueryConfig<TResult, TError>): void {\n    this.config = config\n    this.cacheTime = Math.max(this.cacheTime, config.cacheTime || 0)\n  }\n\n  private dispatch(action: Action<TResult, TError>): void {\n    this.state = queryReducer(this.state, action)\n\n    this.observers.forEach(observer => {\n      observer.onQueryUpdate(action)\n    })\n\n    this.notifyGlobalListeners(this)\n  }\n\n  private scheduleGc(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearGcTimeout()\n\n    if (this.cacheTime === Infinity || this.observers.length > 0) {\n      return\n    }\n\n    this.gcTimeout = setTimeout(() => {\n      this.clear()\n    }, this.cacheTime)\n  }\n\n  cancel(): void {\n    this.cancelFetch?.()\n  }\n\n  private continue(): void {\n    this.continueFetch?.()\n  }\n\n  private clearTimersObservers(): void {\n    this.observers.forEach(observer => {\n      observer.clearTimers()\n    })\n  }\n\n  private clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout)\n      this.gcTimeout = undefined\n    }\n  }\n\n  setData(updater: Updater<TResult | undefined, TResult>): void {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data: TResult | undefined = functionalUpdate(updater, prevData)\n\n    // Structurally share data between prev and new data if needed\n    if (this.config.structuralSharing) {\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.config.isDataEqual?.(prevData, data)) {\n      data = prevData\n    }\n\n    // Try to determine if more data can be fetched\n    const canFetchMore = hasMorePages(this.config, data)\n\n    // Set data and mark it as cached\n    this.dispatch({\n      type: ActionType.Success,\n      data,\n      canFetchMore,\n    })\n  }\n\n  clear(): void {\n    this.queryCache.removeQuery(this)\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.clearTimersObservers()\n    this.cancel()\n  }\n\n  isEnabled(): boolean {\n    return this.observers.some(observer => observer.config.enabled)\n  }\n\n  isStale(): boolean {\n    return this.observers.some(observer => observer.isStale())\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      !this.state.isSuccess || this.state.updatedAt + staleTime <= Date.now()\n    )\n  }\n\n  onInteraction(type: 'focus' | 'online'): void {\n    // Execute the first observer which is enabled,\n    // stale and wants to refetch on this interaction.\n    const observer = this.observers.find(\n      observer =>\n        observer.isStale() &&\n        observer.config.enabled &&\n        ((observer.config.refetchOnWindowFocus && type === 'focus') ||\n          (observer.config.refetchOnReconnect && type === 'online'))\n    )\n\n    if (observer) {\n      observer.fetch().catch(noop)\n    }\n\n    // Continue any paused fetch\n    this.continue()\n  }\n\n  subscribe(\n    listener?: UpdateListener<TResult, TError>\n  ): QueryObserver<TResult, TError> {\n    const observer = new QueryObserver<TResult, TError>({\n      queryCache: this.queryCache,\n      queryKey: this.queryKey,\n      ...this.config,\n    })\n\n    observer.subscribe(listener)\n\n    return observer\n  }\n\n  subscribeObserver(observer: QueryObserver<TResult, TError>): void {\n    this.observers.push(observer)\n\n    // Stop the query from being garbage collected\n    this.clearGcTimeout()\n  }\n\n  unsubscribeObserver(observer: QueryObserver<TResult, TError>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n\n    if (!this.observers.length) {\n      // If the transport layer does not support cancellation\n      // we'll let the query continue so the result can be cached\n      if (this.isTransportCancelable) {\n        this.cancel()\n      }\n    }\n\n    this.scheduleGc()\n  }\n\n  async refetch(\n    options?: RefetchOptions,\n    config?: QueryConfig<TResult, TError>\n  ): Promise<TResult | undefined> {\n    try {\n      return await this.fetch(undefined, config)\n    } catch (error) {\n      if (options?.throwOnError === true) {\n        throw error\n      }\n    }\n  }\n\n  async fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions,\n    config?: QueryConfig<TResult, TError>\n  ): Promise<TResult | undefined> {\n    return this.fetch(\n      {\n        fetchMore: {\n          fetchMoreVariable,\n          previous: options?.previous || false,\n        },\n      },\n      config\n    )\n  }\n\n  async fetch(\n    options?: FetchOptions,\n    config?: QueryConfig<TResult, TError>\n  ): Promise<TResult | undefined> {\n    // If we are already fetching, return current promise\n    if (this.promise) {\n      return this.promise\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (config) {\n      this.updateConfig(config)\n    }\n\n    config = this.config\n\n    // Check if there is a query function\n    if (typeof config.queryFn !== 'function') {\n      return\n    }\n\n    // Get the query function params\n    const filter = config.queryFnParamsFilter\n    const params = filter ? filter(this.queryKey) : this.queryKey\n\n    this.promise = (async () => {\n      try {\n        let data: any\n\n        if (config.infinite) {\n          data = await this.startInfiniteFetch(config, params, options)\n        } else {\n          data = await this.startFetch(config, params, options)\n        }\n\n        // Set success state\n        this.setData(data)\n\n        // Cleanup\n        delete this.promise\n\n        // Return data\n        return data\n      } catch (error) {\n        // Set error state\n        this.dispatch({\n          type: ActionType.Error,\n          error,\n        })\n\n        // Log error\n        if (!isCancelledError(error)) {\n          Console.error(error)\n        }\n\n        // Cleanup\n        delete this.promise\n\n        // Propagate error\n        throw error\n      }\n    })()\n\n    return this.promise\n  }\n\n  private async startFetch(\n    config: QueryConfig<TResult, TError>,\n    params: unknown[],\n    _options?: FetchOptions\n  ): Promise<TResult> {\n    // Create function to fetch the data\n    const fetchData = () => config.queryFn!(...params)\n\n    // Set to fetching state if not already in it\n    if (!this.state.isFetching) {\n      this.dispatch({ type: ActionType.Fetch })\n    }\n\n    // Try to fetch the data\n    return this.tryFetchData(config, fetchData)\n  }\n\n  private async startInfiniteFetch(\n    config: QueryConfig<TResult, TError>,\n    params: unknown[],\n    options?: FetchOptions\n  ): Promise<TResult[]> {\n    const fetchMore = options?.fetchMore\n    const { previous, fetchMoreVariable } = fetchMore || {}\n    const isFetchingMore = fetchMore ? (previous ? 'previous' : 'next') : false\n    const prevPages: TResult[] = (this.state.data as any) || []\n\n    // Create function to fetch a page\n    const fetchPage = async (\n      pages: TResult[],\n      prepend?: boolean,\n      cursor?: unknown\n    ) => {\n      const lastPage = getLastPage(pages, prepend)\n\n      if (\n        typeof cursor === 'undefined' &&\n        typeof lastPage !== 'undefined' &&\n        config.getFetchMore\n      ) {\n        cursor = config.getFetchMore(lastPage, pages)\n      }\n\n      const page = await config.queryFn!(...params, cursor)\n\n      return prepend ? [page, ...pages] : [...pages, page]\n    }\n\n    // Create function to fetch the data\n    const fetchData = () => {\n      if (isFetchingMore) {\n        return fetchPage(prevPages, previous, fetchMoreVariable)\n      } else if (!prevPages.length) {\n        return fetchPage([])\n      } else {\n        let promise = fetchPage([])\n        for (let i = 1; i < prevPages.length; i++) {\n          promise = promise.then(fetchPage)\n        }\n        return promise\n      }\n    }\n\n    // Set to fetching state if not already in it\n    if (!this.state.isFetching) {\n      this.dispatch({ type: ActionType.Fetch, isFetchingMore })\n    }\n\n    // Try to get the data\n    return this.tryFetchData(config, fetchData)\n  }\n\n  private async tryFetchData<T>(\n    config: QueryConfig<TResult, TError>,\n    fn: QueryFunction<T>\n  ): Promise<T> {\n    return new Promise<T>((outerResolve, outerReject) => {\n      let resolved = false\n      let continueLoop: () => void\n      let cancelTransport: () => void\n\n      const done = () => {\n        resolved = true\n\n        delete this.cancelFetch\n        delete this.continueFetch\n        delete this.isTransportCancelable\n\n        // End loop if currently paused\n        continueLoop?.()\n      }\n\n      const resolve = (value: any) => {\n        done()\n        outerResolve(value)\n      }\n\n      const reject = (value: any) => {\n        done()\n        outerReject(value)\n      }\n\n      // Create callback to cancel this fetch\n      this.cancelFetch = () => {\n        reject(new CancelledError())\n        try {\n          cancelTransport?.()\n        } catch {}\n      }\n\n      // Create callback to continue this fetch\n      this.continueFetch = () => {\n        continueLoop?.()\n      }\n\n      // Create loop function\n      const run = async () => {\n        try {\n          // Execute query\n          const promiseOrValue = fn()\n\n          // Check if the transport layer support cancellation\n          if (isCancelable(promiseOrValue)) {\n            cancelTransport = () => {\n              promiseOrValue.cancel()\n            }\n            this.isTransportCancelable = true\n          }\n\n          // Await data\n          resolve(await promiseOrValue)\n        } catch (error) {\n          // Stop if the fetch is already resolved\n          if (resolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const { failureCount } = this.state\n          const { retry, retryDelay } = config\n\n          const shouldRetry =\n            retry === true ||\n            failureCount < retry! ||\n            (typeof retry === 'function' && retry(failureCount, error))\n\n          if (!shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          // Increase the failureCount\n          this.dispatch({ type: ActionType.Failed })\n\n          // Delay\n          await sleep(functionalUpdate(retryDelay, failureCount) || 0)\n\n          // Pause retry if the document is not visible or when the device is offline\n          if (!isDocumentVisible() || !isOnline()) {\n            await new Promise(continueResolve => {\n              continueLoop = continueResolve\n            })\n          }\n\n          // Try again if not resolved yet\n          if (!resolved) {\n            run()\n          }\n        }\n      }\n\n      // Start loop\n      run()\n    })\n  }\n}\n\nfunction getLastPage<TResult>(pages: TResult[], previous?: boolean): TResult {\n  return previous ? pages[0] : pages[pages.length - 1]\n}\n\nfunction hasMorePages<TResult, TError>(\n  config: QueryConfig<TResult, TError>,\n  pages: unknown,\n  previous?: boolean\n): boolean | undefined {\n  if (config.infinite && config.getFetchMore && Array.isArray(pages)) {\n    return Boolean(config.getFetchMore(getLastPage(pages, previous), pages))\n  }\n}\n\nfunction getDefaultState<TResult, TError>(\n  config: QueryConfig<TResult, TError>\n): QueryState<TResult, TError> {\n  const initialData =\n    typeof config.initialData === 'function'\n      ? (config.initialData as InitialDataFunction<TResult>)()\n      : config.initialData\n\n  const hasInitialData = typeof initialData !== 'undefined'\n\n  const initialStatus = hasInitialData\n    ? QueryStatus.Success\n    : config.enabled\n    ? QueryStatus.Loading\n    : QueryStatus.Idle\n\n  return {\n    ...getStatusProps(initialStatus),\n    error: null,\n    isFetched: false,\n    isFetching: initialStatus === QueryStatus.Loading,\n    isFetchingMore: false,\n    failureCount: 0,\n    fetchedCount: 0,\n    data: initialData,\n    updatedAt: Date.now(),\n    canFetchMore: hasMorePages(config, initialData),\n  }\n}\n\nexport function queryReducer<TResult, TError>(\n  state: QueryState<TResult, TError>,\n  action: Action<TResult, TError>\n): QueryState<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Failed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case ActionType.Fetch:\n      const status =\n        typeof state.data !== 'undefined'\n          ? QueryStatus.Success\n          : QueryStatus.Loading\n      return {\n        ...state,\n        ...getStatusProps(status),\n        isFetching: true,\n        isFetchingMore: action.isFetchingMore || false,\n        failureCount: 0,\n      }\n    case ActionType.Success:\n      return {\n        ...state,\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n        fetchedCount: state.fetchedCount + 1,\n        isFetched: true,\n        isFetching: false,\n        isFetchingMore: false,\n        canFetchMore: action.canFetchMore,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case ActionType.Error:\n      return {\n        ...state,\n        ...getStatusProps(QueryStatus.Error),\n        error: action.error,\n        fetchedCount: state.fetchedCount + 1,\n        isFetched: true,\n        isFetching: false,\n        isFetchingMore: false,\n        failureCount: state.failureCount + 1,\n        throwInErrorBoundary: true,\n      }\n    default:\n      return state\n  }\n}\n","import {\n  Updater,\n  deepIncludes,\n  functionalUpdate,\n  getQueryArgs,\n  isDocumentVisible,\n  isObject,\n  isOnline,\n  isServer,\n} from './utils'\nimport { getDefaultedQueryConfig } from './config'\nimport { Query } from './query'\nimport {\n  QueryConfig,\n  QueryFunction,\n  QueryKey,\n  ReactQueryConfig,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from './types'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  frozen?: boolean\n  defaultConfig?: ReactQueryConfig\n}\n\ninterface ClearOptions {\n  notify?: boolean\n}\n\ninterface PrefetchQueryOptions {\n  force?: boolean\n  throwOnError?: boolean\n}\n\ninterface InvalidateQueriesOptions extends QueryPredicateOptions {\n  refetchActive?: boolean\n  refetchInactive?: boolean\n  throwOnError?: boolean\n}\n\ninterface QueryPredicateOptions {\n  exact?: boolean\n}\n\ntype QueryPredicate = QueryKey | QueryPredicateFn | true\n\ntype QueryPredicateFn = (query: Query<unknown, unknown>) => boolean\n\nexport interface PrefetchQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: QueryConfig<TResult, TError>\n  options?: PrefetchQueryOptions\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ntype QueryCacheListener = (\n  cache: QueryCache,\n  query?: Query<unknown, unknown>\n) => void\n\n// CLASS\n\nexport class QueryCache {\n  isFetching: number\n\n  private config: QueryCacheConfig\n  private globalListeners: QueryCacheListener[]\n  private queries: QueryHashMap\n  private queriesArray: Query<any, any>[]\n\n  constructor(config?: QueryCacheConfig) {\n    this.config = config || {}\n\n    // A frozen cache does not add new queries to the cache\n    this.globalListeners = []\n\n    this.queries = {}\n    this.queriesArray = []\n    this.isFetching = 0\n  }\n\n  private notifyGlobalListeners(query?: Query<any, any>) {\n    this.isFetching = this.getQueries().reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n\n    this.globalListeners.forEach(listener => {\n      listener(this, query)\n    })\n  }\n\n  getDefaultConfig() {\n    return this.config.defaultConfig\n  }\n\n  getDefaultedQueryConfig<TResult, TError>(\n    config?: QueryConfig<TResult, TError>\n  ): QueryConfig<TResult, TError> {\n    return getDefaultedQueryConfig(this.getDefaultConfig(), undefined, config, {\n      queryCache: this,\n    })\n  }\n\n  subscribe(listener: QueryCacheListener): () => void {\n    this.globalListeners.push(listener)\n    return () => {\n      this.globalListeners = this.globalListeners.filter(x => x !== listener)\n    }\n  }\n\n  clear(options?: ClearOptions): void {\n    this.removeQueries()\n    if (options?.notify) {\n      this.notifyGlobalListeners()\n    }\n  }\n\n  getQueries<TResult = unknown, TError = unknown>(\n    predicate?: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): Query<TResult, TError>[] {\n    if (predicate === true || typeof predicate === 'undefined') {\n      return this.queriesArray\n    }\n\n    let predicateFn: QueryPredicateFn\n\n    if (typeof predicate === 'function') {\n      predicateFn = predicate as QueryPredicateFn\n    } else {\n      const config = this.getDefaultedQueryConfig()\n      const [queryHash, queryKey] = config.queryKeySerializerFn!(predicate)\n\n      predicateFn = d =>\n        options?.exact\n          ? d.queryHash === queryHash\n          : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return this.queriesArray.filter(predicateFn)\n  }\n\n  getQuery<TResult, TError = unknown>(\n    predicate: QueryPredicate\n  ): Query<TResult, TError> | undefined {\n    return this.getQueries<TResult, TError>(predicate, { exact: true })[0]\n  }\n\n  getQueryData<TResult>(predicate: QueryPredicate): TResult | undefined {\n    return this.getQuery<TResult>(predicate)?.state.data\n  }\n\n  removeQuery(query: Query<any, any>): void {\n    if (this.queries[query.queryHash]) {\n      query.destroy()\n      delete this.queries[query.queryHash]\n      this.queriesArray = this.queriesArray.filter(x => x !== query)\n      this.notifyGlobalListeners(query)\n    }\n  }\n\n  removeQueries(\n    predicate?: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => {\n      this.removeQuery(query)\n    })\n  }\n\n  cancelQueries(\n    predicate?: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => {\n      query.cancel()\n    })\n  }\n\n  async invalidateQueries(\n    predicate?: QueryPredicate,\n    options?: InvalidateQueriesOptions\n  ): Promise<void> {\n    const { refetchActive = true, refetchInactive = false, throwOnError } =\n      options || {}\n\n    try {\n      await Promise.all(\n        this.getQueries(predicate, options).map(query => {\n          const enabled = query.isEnabled()\n\n          if ((enabled && refetchActive) || (!enabled && refetchInactive)) {\n            return query.fetch()\n          }\n\n          return undefined\n        })\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  resetErrorBoundaries(): void {\n    this.getQueries().forEach(query => {\n      query.state.throwInErrorBoundary = false\n    })\n  }\n\n  buildQuery<TResult, TError = unknown>(\n    userQueryKey: QueryKey,\n    queryConfig?: QueryConfig<TResult, TError>\n  ): Query<TResult, TError> {\n    const config = this.getDefaultedQueryConfig(queryConfig)\n    const [queryHash, queryKey] = config.queryKeySerializerFn!(userQueryKey)\n\n    if (this.queries[queryHash]) {\n      return this.queries[queryHash] as Query<TResult, TError>\n    }\n\n    const query = new Query<TResult, TError>({\n      queryCache: this,\n      queryKey,\n      queryHash,\n      config,\n      notifyGlobalListeners: query => {\n        this.notifyGlobalListeners(query)\n      },\n    })\n\n    if (!this.config.frozen) {\n      this.queries[queryHash] = query\n      this.queriesArray.push(query)\n      this.notifyGlobalListeners(query)\n    }\n\n    return query\n  }\n\n  // Parameter syntax with optional prefetch options\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function and optional prefetch options\n  async prefetchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function, config and optional prefetch options\n  async prefetchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Object syntax\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    config: PrefetchQueryObjectConfig<TResult, TError>\n  ): Promise<TResult | undefined>\n\n  // Implementation\n  async prefetchQuery<TResult, TError>(\n    ...args: any[]\n  ): Promise<TResult | undefined> {\n    if (\n      isObject(args[1]) &&\n      (args[1].hasOwnProperty('throwOnError') ||\n        args[1].hasOwnProperty('force'))\n    ) {\n      args[3] = args[1]\n      args[1] = undefined\n      args[2] = undefined\n    }\n\n    const [queryKey, config, options] = getQueryArgs<\n      TResult,\n      TError,\n      PrefetchQueryOptions | undefined\n    >(args)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    const configWithoutRetry = this.getDefaultedQueryConfig({\n      retry: false,\n      ...config,\n    })\n\n    let query\n    try {\n      query = this.buildQuery<TResult, TError>(queryKey, configWithoutRetry)\n      if (options?.force || query.isStaleByTime(config.staleTime)) {\n        await query.fetch(undefined, configWithoutRetry)\n      }\n      return query.state.data\n    } catch (error) {\n      if (options?.throwOnError) {\n        throw error\n      }\n    }\n  }\n\n  setQueryData<TResult, TError = unknown>(\n    queryKey: QueryKey,\n    updater: Updater<TResult | undefined, TResult>,\n    config?: QueryConfig<TResult, TError>\n  ) {\n    const query = this.getQuery<TResult, TError>(queryKey)\n\n    if (query) {\n      query.setData(updater)\n      return\n    }\n\n    this.buildQuery<TResult, TError>(queryKey, {\n      initialStale: typeof config?.staleTime === 'undefined',\n      initialData: functionalUpdate(updater, undefined),\n      ...config,\n    })\n  }\n}\n\nconst defaultQueryCache = makeQueryCache({ frozen: isServer })\nexport { defaultQueryCache as queryCache }\nexport const queryCaches = [defaultQueryCache]\n\nexport function makeQueryCache(config?: QueryCacheConfig) {\n  return new QueryCache(config)\n}\n\nexport function onVisibilityOrOnlineChange(type: 'focus' | 'online') {\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(queryCache => {\n      queryCache.getQueries().forEach(query => {\n        query.onInteraction(type)\n      })\n    })\n  }\n}\n","import { createSetHandler, isServer } from './utils'\nimport { onVisibilityOrOnlineChange } from './queryCache'\n\nexport const setFocusHandler = createSetHandler(() =>\n  onVisibilityOrOnlineChange('focus')\n)\n\nsetFocusHandler(handleFocus => {\n  if (isServer || !window?.addEventListener) {\n    return\n  }\n\n  // Listen to visibillitychange and focus\n  window.addEventListener('visibilitychange', handleFocus, false)\n  window.addEventListener('focus', handleFocus, false)\n\n  return () => {\n    // Be sure to unsubscribe if a new handler is set\n    window.removeEventListener('visibilitychange', handleFocus)\n    window.removeEventListener('focus', handleFocus)\n  }\n})\n","import { createSetHandler, isServer } from './utils'\nimport { onVisibilityOrOnlineChange } from './queryCache'\n\nexport const setOnlineHandler = createSetHandler(() =>\n  onVisibilityOrOnlineChange('online')\n)\n\nsetOnlineHandler(handleOnline => {\n  if (isServer || !window?.addEventListener) {\n    return\n  }\n\n  // Listen to online\n  window.addEventListener('online', handleOnline, false)\n\n  return () => {\n    // Be sure to unsubscribe if a new handler is set\n    window.removeEventListener('online', handleOnline)\n  }\n})\n","import React from 'react'\n\nimport {\n  queryCache as defaultQueryCache,\n  queryCaches,\n  makeQueryCache,\n} from '../core'\nimport { QueryCache } from '../core/queryCache'\n\nexport const queryCacheContext = React.createContext(defaultQueryCache)\n\nexport const useQueryCache = () => React.useContext(queryCacheContext)\n\nexport interface ReactQueryCacheProviderProps {\n  queryCache?: QueryCache\n}\n\nexport const ReactQueryCacheProvider: React.FC<ReactQueryCacheProviderProps> = ({\n  queryCache,\n  children,\n}) => {\n  const resolvedQueryCache = React.useMemo(\n    () => queryCache || makeQueryCache(),\n    [queryCache]\n  )\n\n  React.useEffect(() => {\n    queryCaches.push(resolvedQueryCache)\n\n    return () => {\n      // remove the cache from the active list\n      const i = queryCaches.indexOf(resolvedQueryCache)\n      if (i > -1) {\n        queryCaches.splice(i, 1)\n      }\n      // if the resolvedQueryCache was created by us, we need to tear it down\n      if (queryCache == null) {\n        resolvedQueryCache.clear({ notify: false })\n      }\n    }\n  }, [resolvedQueryCache, queryCache])\n\n  return (\n    <queryCacheContext.Provider value={resolvedQueryCache}>\n      {children}\n    </queryCacheContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { mergeReactQueryConfigs } from '../core/config'\nimport { ReactQueryConfig } from '../core/types'\n\nconst configContext = React.createContext<ReactQueryConfig | undefined>(\n  undefined\n)\n\nexport function useContextConfig() {\n  return React.useContext(configContext)\n}\n\nexport interface ReactQueryConfigProviderProps {\n  config: ReactQueryConfig\n}\n\nexport const ReactQueryConfigProvider: React.FC<ReactQueryConfigProviderProps> = ({\n  config,\n  children,\n}) => {\n  const parentConfig = useContextConfig()\n\n  const mergedConfig = React.useMemo(\n    () =>\n      parentConfig ? mergeReactQueryConfigs(parentConfig, config) : config,\n    [config, parentConfig]\n  )\n\n  return (\n    <configContext.Provider value={mergedConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { isServer } from '../core/utils'\n\nexport function useGetLatest<T>(obj: T): () => T {\n  const ref = React.useRef<T>(obj)\n  ref.current = obj\n  return React.useCallback(() => ref.current, [])\n}\n\nfunction useIsMounted(): () => boolean {\n  const mountedRef = React.useRef(false)\n  const isMounted = React.useCallback(() => mountedRef.current, [])\n\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mountedRef.current = true\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  return isMounted\n}\n\nexport function useMountedCallback<T extends Function>(callback: T): T {\n  const isMounted = useIsMounted()\n  return (React.useCallback(\n    (...args: any[]) => {\n      if (isMounted()) {\n        return callback(...args)\n      }\n    },\n    [callback, isMounted]\n  ) as any) as T\n}\n\n/**\n * This hook is a safe useState version which schedules state updates in microtasks\n * to prevent updating a component state while React is rendering different components\n * or when the component is not mounted anymore.\n */\nexport function useSafeState<S>(\n  initialState: S | (() => S)\n): [S, React.Dispatch<React.SetStateAction<S>>] {\n  const isMounted = useIsMounted()\n  const [state, setState] = React.useState(initialState)\n\n  const safeSetState = React.useCallback(\n    (value: React.SetStateAction<S>) => {\n      scheduleMicrotask(() => {\n        if (isMounted()) {\n          setState(value)\n        }\n      })\n    },\n    [isMounted]\n  )\n\n  return [state, safeSetState]\n}\n\nexport function useRerenderer() {\n  const [, setState] = useSafeState({})\n  return React.useCallback(() => setState({}), [setState])\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nfunction scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import React from 'react'\n\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useSafeState } from './utils'\n\nexport function useIsFetching(): number {\n  const queryCache = useQueryCache()\n\n  const [isFetching, setIsFetching] = useSafeState(queryCache.isFetching)\n\n  React.useEffect(\n    () =>\n      queryCache.subscribe(() => {\n        setIsFetching(queryCache.isFetching)\n      }),\n    [queryCache, setIsFetching]\n  )\n\n  return isFetching\n}\n","import { MutationConfig } from '../core/types'\nimport { getDefaultedMutationConfig } from '../core/config'\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useContextConfig } from './ReactQueryConfigProvider'\n\nexport function useDefaultedMutationConfig<\n  TResult,\n  TError,\n  TVariables,\n  TSnapshot\n>(\n  config?: MutationConfig<TResult, TError, TVariables, TSnapshot>\n): MutationConfig<TResult, TError, TVariables, TSnapshot> {\n  const contextConfig = useContextConfig()\n  const contextQueryCache = useQueryCache()\n  const queryCache = config?.queryCache || contextQueryCache\n  const queryCacheConfig = queryCache.getDefaultConfig()\n  return getDefaultedMutationConfig(queryCacheConfig, contextConfig, config, {\n    queryCache,\n  })\n}\n","import React from 'react'\n\nimport { useDefaultedMutationConfig } from './useDefaultedMutationConfig'\nimport { useGetLatest, useMountedCallback } from './utils'\nimport { Console, uid, getStatusProps } from '../core/utils'\nimport {\n  QueryStatus,\n  MutationResultPair,\n  MutationFunction,\n  MutationConfig,\n  MutateConfig,\n} from '../core/types'\n\n// TYPES\n\ntype Reducer<S, A> = (prevState: S, action: A) => S\n\ninterface State<TResult, TError> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n}\n\nenum ActionType {\n  Reset = 'Reset',\n  Loading = 'Loading',\n  Resolve = 'Resolve',\n  Reject = 'Reject',\n}\n\ninterface ResetAction {\n  type: ActionType.Reset\n}\n\ninterface LoadingAction {\n  type: ActionType.Loading\n}\n\ninterface ResolveAction<TResult> {\n  type: ActionType.Resolve\n  data: TResult\n}\n\ninterface RejectAction<TError> {\n  type: ActionType.Reject\n  error: TError\n}\n\ntype Action<TResult, TError> =\n  | ResetAction\n  | LoadingAction\n  | ResolveAction<TResult>\n  | RejectAction<TError>\n\n// HOOK\n\nconst getDefaultState = (): State<any, any> => ({\n  ...getStatusProps(QueryStatus.Idle),\n  data: undefined,\n  error: null,\n})\n\nfunction mutationReducer<TResult, TError>(\n  state: State<TResult, TError>,\n  action: Action<TResult, TError>\n): State<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Reset:\n      return getDefaultState()\n    case ActionType.Loading:\n      return {\n        ...getStatusProps(QueryStatus.Loading),\n        data: undefined,\n        error: null,\n      }\n    case ActionType.Resolve:\n      return {\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n      }\n    case ActionType.Reject:\n      return {\n        ...getStatusProps(QueryStatus.Error),\n        data: undefined,\n        error: action.error,\n      }\n    default:\n      return state\n  }\n}\n\nexport function useMutation<\n  TResult,\n  TError = unknown,\n  TVariables = undefined,\n  TSnapshot = unknown\n>(\n  mutationFn: MutationFunction<TResult, TVariables>,\n  config: MutationConfig<TResult, TError, TVariables, TSnapshot> = {}\n): MutationResultPair<TResult, TError, TVariables, TSnapshot> {\n  config = useDefaultedMutationConfig(config)\n  const getConfig = useGetLatest(config)\n\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer as Reducer<State<TResult, TError>, Action<TResult, TError>>,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const latestMutationRef = React.useRef<number>()\n\n  const mutate = React.useCallback(\n    async (\n      variables?: TVariables,\n      mutateConfig: MutateConfig<TResult, TError, TVariables, TSnapshot> = {}\n    ): Promise<TResult | undefined> => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = () => latestMutationRef.current === mutationId\n\n      let snapshotValue: TSnapshot | undefined\n\n      try {\n        dispatch({ type: ActionType.Loading })\n        snapshotValue = (await config.onMutate?.(variables!)) as TSnapshot\n\n        const data = await getMutationFn()(variables!)\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Resolve, data })\n        }\n\n        await config.onSuccess?.(data, variables!)\n        await mutateConfig.onSuccess?.(data, variables!)\n        await config.onSettled?.(data, null, variables!)\n        await mutateConfig.onSettled?.(data, null, variables!)\n\n        return data\n      } catch (error) {\n        Console.error(error)\n        await config.onError?.(error, variables!, snapshotValue!)\n        await mutateConfig.onError?.(error, variables!, snapshotValue!)\n        await config.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue as TSnapshot\n        )\n        await mutateConfig.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue\n        )\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Reject, error })\n        }\n\n        if (mutateConfig.throwOnError ?? config.throwOnError) {\n          throw error\n        }\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => {\n    dispatch({ type: ActionType.Reset })\n  }, [dispatch])\n\n  React.useEffect(() => {\n    const { suspense, useErrorBoundary } = getConfig()\n\n    if ((useErrorBoundary ?? suspense) && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [mutate, { ...state, reset }]\n}\n","import { QueryConfig } from '../core/types'\nimport { getDefaultedQueryConfig } from '../core/config'\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useContextConfig } from './ReactQueryConfigProvider'\n\nexport function useDefaultedQueryConfig<TResult, TError>(\n  config?: QueryConfig<TResult, TError>\n): QueryConfig<TResult, TError> {\n  const contextConfig = useContextConfig()\n  const contextQueryCache = useQueryCache()\n  const queryCache = config?.queryCache || contextQueryCache\n  const queryCacheConfig = queryCache.getDefaultConfig()\n  return getDefaultedQueryConfig(queryCacheConfig, contextConfig, config, {\n    queryCache,\n  })\n}\n","import React from 'react'\n\nimport { useRerenderer } from './utils'\nimport { QueryObserver } from '../core/queryObserver'\nimport { QueryResultBase, QueryObserverConfig } from '../core/types'\nimport { useDefaultedQueryConfig } from './useDefaultedQueryConfig'\n\nexport function useBaseQuery<TResult, TError>(\n  config: QueryObserverConfig<TResult, TError> = {}\n): QueryResultBase<TResult, TError> {\n  config = useDefaultedQueryConfig(config)\n\n  // Make a rerender function\n  const rerender = useRerenderer()\n\n  // Create query observer\n  const observerRef = React.useRef<QueryObserver<TResult, TError>>()\n  const firstRender = !observerRef.current\n  const observer = observerRef.current || new QueryObserver(config)\n  observerRef.current = observer\n\n  // Subscribe to the observer\n  React.useEffect(\n    () =>\n      observer.subscribe(() => {\n        rerender()\n      }),\n    [observer, rerender]\n  )\n\n  // Update config\n  if (!firstRender) {\n    observer.updateConfig(config)\n  }\n\n  const result = observer.getCurrentResult()\n\n  // Handle suspense\n  if (config.suspense || config.useErrorBoundary) {\n    const query = observer.getCurrentQuery()\n\n    if (result.isError && query.state.throwInErrorBoundary) {\n      throw result.error\n    }\n\n    if (config.enabled && config.suspense && !result.isSuccess) {\n      const unsubscribe = observer.subscribe()\n      throw observer.fetch().finally(unsubscribe)\n    }\n  }\n\n  return result\n}\n","import {\n  QueryConfig,\n  QueryFunction,\n  QueryKey,\n  QueryResult,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// TYPES\n\nexport interface UseQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: QueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\nexport function useQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Object syntax\nexport function useQuery<TResult = unknown, TError = unknown>(\n  config: UseQueryObjectConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Implementation\nexport function useQuery<TResult, TError>(\n  ...args: any[]\n): QueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult, TError>(args)[1]\n  return useBaseQuery<TResult, TError>(config)\n}\n","import {\n  PaginatedQueryConfig,\n  PaginatedQueryResult,\n  QueryFunction,\n  QueryKey,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// A paginated query is more like a \"lag\" query, which means\n// as the query key changes, we keep the results from the\n// last query and use them as placeholder data in the next one\n// We DON'T use it as initial data though. That's important\n\n// TYPES\n\nexport interface UsePaginatedQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: PaginatedQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function usePaginatedQuery<\n  TResult,\n  TError,\n  TArgs extends TypedQueryFunctionArgs\n>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Object syntax\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  config: UsePaginatedQueryObjectConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Implementation\nexport function usePaginatedQuery<TResult, TError>(\n  ...args: any[]\n): PaginatedQueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult, TError>(args)[1]\n  const result = useBaseQuery<TResult, TError>({\n    keepPreviousData: true,\n    ...config,\n  })\n  return {\n    ...result,\n    resolvedData: result.data,\n    latestData: result.isPreviousData ? undefined : result.data,\n  }\n}\n","import {\n  InfiniteQueryConfig,\n  InfiniteQueryResult,\n  QueryFunction,\n  QueryKey,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// TYPES\n\nexport interface UseInfiniteQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: InfiniteQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TArgs extends TypedQueryFunctionArgs\n>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Object syntax\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  config: UseInfiniteQueryObjectConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Implementation\nexport function useInfiniteQuery<TResult, TError>(\n  ...args: any[]\n): InfiniteQueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult[], TError>(args)[1]\n  return useBaseQuery<TResult[], TError>({ ...config, infinite: true })\n}\n"],"names":["QueryStatus","CancelledError","_uid","uid","isServer","window","noop","Console","console","error","warn","log","setConsole","c","functionalUpdate","updater","input","stableStringifyReplacer","_key","value","Error","isObject","Object","keys","sort","reduce","result","key","stableStringify","JSON","stringify","deepIncludes","a","b","some","isDocumentVisible","document","undefined","includes","visibilityState","isOnline","navigator","onLine","getQueryArgs","args","queryKey","queryFn","config","options","replaceEqualDeep","array","Array","isArray","isPlainObject","aSize","length","bItems","bSize","copy","equalItems","i","o","hasObjectPrototype","ctor","constructor","prot","prototype","hasOwnProperty","toString","call","isCancelable","cancel","isError","isCancelledError","sleep","timeout","Promise","resolve","setTimeout","getStatusProps","status","isLoading","Loading","isSuccess","Success","isIdle","Idle","createSetHandler","fn","removePreviousHandler","callback","defaultQueryKeySerializerFn","arrayQueryKey","queryHash","parse","DEFAULT_STALE_TIME","DEFAULT_CACHE_TIME","DEFAULT_CONFIG","queries","cacheTime","enabled","notifyOnStatusChange","queryKeySerializerFn","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","retry","retryDelay","attemptIndex","Math","min","staleTime","structuralSharing","mergeReactQueryConfigs","shared","mutations","getDefaultedQueryConfig","queryCacheConfig","contextConfig","configOverrides","getDefaultedMutationConfig","then","direct","body","recover","e","QueryObserver","queryCache","initialFetchedCount","clear","bind","refetch","fetchMore","updateQuery","subscribe","listener","started","updateListener","currentQuery","subscribeObserver","forceFetchOnMount","fetch","optionalFetch","updateTimers","unsubscribe","clearTimers","unsubscribeObserver","updateConfig","prevConfig","updated","updateStaleTimeout","refetchInterval","refetchIntervalInBackground","updateRefetchInterval","isStale","currentResult","getCurrentQuery","getCurrentResult","fetchMoreVariable","suspense","isFetched","observers","updateIsStale","isStaleByTime","updateResult","notify","clearStaleTimeout","updatedAt","Infinity","timeElapsed","Date","now","timeUntilStale","max","staleTimeoutId","clearRefetchInterval","refetchIntervalId","setInterval","clearInterval","previousQueryResult","state","data","isPreviousData","keepPreviousData","initialStale","canFetchMore","failureCount","isFetchedAfterMount","fetchedCount","isFetching","isFetchingMore","prevQuery","initialData","newQuery","buildQuery","onQueryUpdate","action","prevResult","type","onSuccess","onSettled","onError","f","arguments","apply","reject","ActionType","Query","init","notifyGlobalListeners","getDefaultState","scheduleGc","dispatch","queryReducer","forEach","observer","clearGcTimeout","gcTimeout","cancelFetch","continue","continueFetch","clearTimersObservers","clearTimeout","setData","prevData","isDataEqual","hasMorePages","removeQuery","destroy","isEnabled","onInteraction","find","catch","push","filter","x","isTransportCancelable","throwOnError","previous","promise","queryFnParamsFilter","params","infinite","startInfiniteFetch","startFetch","_options","fetchData","Fetch","tryFetchData","prevPages","fetchPage","pages","prepend","cursor","lastPage","getLastPage","getFetchMore","page","outerResolve","outerReject","resolved","continueLoop","cancelTransport","done","run","promiseOrValue","shouldRetry","Failed","continueResolve","Boolean","hasInitialData","initialStatus","throwInErrorBoundary","QueryCache","globalListeners","queriesArray","query","getQueries","acc","getDefaultConfig","defaultConfig","removeQueries","predicate","predicateFn","d","exact","getQuery","getQueryData","cancelQueries","invalidateQueries","refetchActive","refetchInactive","all","map","err","resetErrorBoundaries","userQueryKey","queryConfig","frozen","prefetchQuery","configWithoutRetry","force","setQueryData","defaultQueryCache","makeQueryCache","queryCaches","onVisibilityOrOnlineChange","setFocusHandler","handleFocus","addEventListener","removeEventListener","setOnlineHandler","handleOnline","queryCacheContext","React","createContext","useQueryCache","useContext","ReactQueryCacheProvider","children","resolvedQueryCache","useMemo","useEffect","indexOf","splice","configContext","useContextConfig","ReactQueryConfigProvider","parentConfig","mergedConfig","useGetLatest","obj","ref","useRef","current","useCallback","useIsMounted","mountedRef","isMounted","useMountedCallback","useSafeState","initialState","useState","setState","safeSetState","scheduleMicrotask","useRerenderer","useIsFetching","setIsFetching","useDefaultedMutationConfig","contextQueryCache","_await","mutationReducer","Reset","Resolve","Reject","useMutation","mutationFn","getConfig","useReducer","unsafeDispatch","getMutationFn","latestMutationRef","mutate","variables","mutateConfig","mutationId","isLatest","snapshotValue","onMutate","reset","useErrorBoundary","useDefaultedQueryConfig","useBaseQuery","rerender","observerRef","firstRender","finally","useQuery","usePaginatedQuery","resolvedData","latestData","useInfiniteQuery"],"mappings":"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"}